// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/19/2019 23:13:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    JSQ_FZN_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module JSQ_FZN_top_vlg_sample_tst(
	CLOCK_50,
	KEY,
	SW,
	sampler_tx
);
input  CLOCK_50;
input [3:0] KEY;
input [17:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module JSQ_FZN_top_vlg_check_tst (
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	LEDG,
	LEDG3,
	O1,
	O2,
	O3,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [2:0] LEDG;
input  LEDG3;
input [15:0] O1;
input [15:0] O2;
input [31:0] O3;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [2:0] LEDG_expected;
reg  LEDG3_expected;
reg [15:0] O1_expected;
reg [15:0] O2_expected;
reg [31:0] O3_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [2:0] LEDG_prev;
reg  LEDG3_prev;
reg [15:0] O1_prev;
reg [15:0] O2_prev;
reg [31:0] O3_prev;

reg [15:0] O1_expected_prev;
reg [15:0] O2_expected_prev;
reg [31:0] O3_expected_prev;

reg [15:0] last_O1_exp;
reg [15:0] last_O2_exp;
reg [31:0] last_O3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	LEDG_prev = LEDG;
	LEDG3_prev = LEDG3;
	O1_prev = O1;
	O2_prev = O2;
	O3_prev = O3;
end

// update expected /o prevs

always @(trigger)
begin
	O1_expected_prev = O1_expected;
	O2_expected_prev = O2_expected;
	O3_expected_prev = O3_expected;
end


// expected O1[ 15 ]
initial
begin
	O1_expected[15] = 1'bX;
end 
// expected O1[ 14 ]
initial
begin
	O1_expected[14] = 1'bX;
end 
// expected O1[ 13 ]
initial
begin
	O1_expected[13] = 1'bX;
end 
// expected O1[ 12 ]
initial
begin
	O1_expected[12] = 1'bX;
end 
// expected O1[ 11 ]
initial
begin
	O1_expected[11] = 1'bX;
end 
// expected O1[ 10 ]
initial
begin
	O1_expected[10] = 1'bX;
end 
// expected O1[ 9 ]
initial
begin
	O1_expected[9] = 1'bX;
end 
// expected O1[ 8 ]
initial
begin
	O1_expected[8] = 1'bX;
end 
// expected O1[ 7 ]
initial
begin
	O1_expected[7] = 1'bX;
end 
// expected O1[ 6 ]
initial
begin
	O1_expected[6] = 1'bX;
end 
// expected O1[ 5 ]
initial
begin
	O1_expected[5] = 1'bX;
end 
// expected O1[ 4 ]
initial
begin
	O1_expected[4] = 1'bX;
end 
// expected O1[ 3 ]
initial
begin
	O1_expected[3] = 1'bX;
end 
// expected O1[ 2 ]
initial
begin
	O1_expected[2] = 1'bX;
end 
// expected O1[ 1 ]
initial
begin
	O1_expected[1] = 1'bX;
end 
// expected O1[ 0 ]
initial
begin
	O1_expected[0] = 1'bX;
end 
// expected O2[ 15 ]
initial
begin
	O2_expected[15] = 1'bX;
end 
// expected O2[ 14 ]
initial
begin
	O2_expected[14] = 1'bX;
end 
// expected O2[ 13 ]
initial
begin
	O2_expected[13] = 1'bX;
end 
// expected O2[ 12 ]
initial
begin
	O2_expected[12] = 1'bX;
end 
// expected O2[ 11 ]
initial
begin
	O2_expected[11] = 1'bX;
end 
// expected O2[ 10 ]
initial
begin
	O2_expected[10] = 1'bX;
end 
// expected O2[ 9 ]
initial
begin
	O2_expected[9] = 1'bX;
end 
// expected O2[ 8 ]
initial
begin
	O2_expected[8] = 1'bX;
end 
// expected O2[ 7 ]
initial
begin
	O2_expected[7] = 1'bX;
end 
// expected O2[ 6 ]
initial
begin
	O2_expected[6] = 1'bX;
end 
// expected O2[ 5 ]
initial
begin
	O2_expected[5] = 1'bX;
end 
// expected O2[ 4 ]
initial
begin
	O2_expected[4] = 1'bX;
end 
// expected O2[ 3 ]
initial
begin
	O2_expected[3] = 1'bX;
end 
// expected O2[ 2 ]
initial
begin
	O2_expected[2] = 1'bX;
end 
// expected O2[ 1 ]
initial
begin
	O2_expected[1] = 1'bX;
end 
// expected O2[ 0 ]
initial
begin
	O2_expected[0] = 1'bX;
end 
// expected O3[ 31 ]
initial
begin
	O3_expected[31] = 1'bX;
end 
// expected O3[ 30 ]
initial
begin
	O3_expected[30] = 1'bX;
end 
// expected O3[ 29 ]
initial
begin
	O3_expected[29] = 1'bX;
end 
// expected O3[ 28 ]
initial
begin
	O3_expected[28] = 1'bX;
end 
// expected O3[ 27 ]
initial
begin
	O3_expected[27] = 1'bX;
end 
// expected O3[ 26 ]
initial
begin
	O3_expected[26] = 1'bX;
end 
// expected O3[ 25 ]
initial
begin
	O3_expected[25] = 1'bX;
end 
// expected O3[ 24 ]
initial
begin
	O3_expected[24] = 1'bX;
end 
// expected O3[ 23 ]
initial
begin
	O3_expected[23] = 1'bX;
end 
// expected O3[ 22 ]
initial
begin
	O3_expected[22] = 1'bX;
end 
// expected O3[ 21 ]
initial
begin
	O3_expected[21] = 1'bX;
end 
// expected O3[ 20 ]
initial
begin
	O3_expected[20] = 1'bX;
end 
// expected O3[ 19 ]
initial
begin
	O3_expected[19] = 1'bX;
end 
// expected O3[ 18 ]
initial
begin
	O3_expected[18] = 1'bX;
end 
// expected O3[ 17 ]
initial
begin
	O3_expected[17] = 1'bX;
end 
// expected O3[ 16 ]
initial
begin
	O3_expected[16] = 1'bX;
end 
// expected O3[ 15 ]
initial
begin
	O3_expected[15] = 1'bX;
end 
// expected O3[ 14 ]
initial
begin
	O3_expected[14] = 1'bX;
end 
// expected O3[ 13 ]
initial
begin
	O3_expected[13] = 1'bX;
end 
// expected O3[ 12 ]
initial
begin
	O3_expected[12] = 1'bX;
end 
// expected O3[ 11 ]
initial
begin
	O3_expected[11] = 1'bX;
end 
// expected O3[ 10 ]
initial
begin
	O3_expected[10] = 1'bX;
end 
// expected O3[ 9 ]
initial
begin
	O3_expected[9] = 1'bX;
end 
// expected O3[ 8 ]
initial
begin
	O3_expected[8] = 1'bX;
end 
// expected O3[ 7 ]
initial
begin
	O3_expected[7] = 1'bX;
end 
// expected O3[ 6 ]
initial
begin
	O3_expected[6] = 1'bX;
end 
// expected O3[ 5 ]
initial
begin
	O3_expected[5] = 1'bX;
end 
// expected O3[ 4 ]
initial
begin
	O3_expected[4] = 1'bX;
end 
// expected O3[ 3 ]
initial
begin
	O3_expected[3] = 1'bX;
end 
// expected O3[ 2 ]
initial
begin
	O3_expected[2] = 1'bX;
end 
// expected O3[ 1 ]
initial
begin
	O3_expected[1] = 1'bX;
end 
// expected O3[ 0 ]
initial
begin
	O3_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or LEDG_expected or LEDG or LEDG3_expected or LEDG3 or O1_expected or O1 or O2_expected or O2 or O3_expected or O3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected LEDG = %b | expected LEDG3 = %b | expected O1 = %b | expected O2 = %b | expected O3 = %b | ",HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,LEDG_expected_prev,LEDG3_expected_prev,O1_expected_prev,O2_expected_prev,O3_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real LEDG = %b | real LEDG3 = %b | real O1 = %b | real O2 = %b | real O3 = %b | ",HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,LEDG_prev,LEDG3_prev,O1_prev,O2_prev,O3_prev);
`endif
	if (
		( O1_expected_prev[0] !== 1'bx ) && ( O1_prev[0] !== O1_expected_prev[0] )
		&& ((O1_expected_prev[0] !== last_O1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[0] = O1_expected_prev[0];
	end
	if (
		( O1_expected_prev[1] !== 1'bx ) && ( O1_prev[1] !== O1_expected_prev[1] )
		&& ((O1_expected_prev[1] !== last_O1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[1] = O1_expected_prev[1];
	end
	if (
		( O1_expected_prev[2] !== 1'bx ) && ( O1_prev[2] !== O1_expected_prev[2] )
		&& ((O1_expected_prev[2] !== last_O1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[2] = O1_expected_prev[2];
	end
	if (
		( O1_expected_prev[3] !== 1'bx ) && ( O1_prev[3] !== O1_expected_prev[3] )
		&& ((O1_expected_prev[3] !== last_O1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[3] = O1_expected_prev[3];
	end
	if (
		( O1_expected_prev[4] !== 1'bx ) && ( O1_prev[4] !== O1_expected_prev[4] )
		&& ((O1_expected_prev[4] !== last_O1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[4] = O1_expected_prev[4];
	end
	if (
		( O1_expected_prev[5] !== 1'bx ) && ( O1_prev[5] !== O1_expected_prev[5] )
		&& ((O1_expected_prev[5] !== last_O1_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[5] = O1_expected_prev[5];
	end
	if (
		( O1_expected_prev[6] !== 1'bx ) && ( O1_prev[6] !== O1_expected_prev[6] )
		&& ((O1_expected_prev[6] !== last_O1_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[6] = O1_expected_prev[6];
	end
	if (
		( O1_expected_prev[7] !== 1'bx ) && ( O1_prev[7] !== O1_expected_prev[7] )
		&& ((O1_expected_prev[7] !== last_O1_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[7] = O1_expected_prev[7];
	end
	if (
		( O1_expected_prev[8] !== 1'bx ) && ( O1_prev[8] !== O1_expected_prev[8] )
		&& ((O1_expected_prev[8] !== last_O1_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[8] = O1_expected_prev[8];
	end
	if (
		( O1_expected_prev[9] !== 1'bx ) && ( O1_prev[9] !== O1_expected_prev[9] )
		&& ((O1_expected_prev[9] !== last_O1_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[9] = O1_expected_prev[9];
	end
	if (
		( O1_expected_prev[10] !== 1'bx ) && ( O1_prev[10] !== O1_expected_prev[10] )
		&& ((O1_expected_prev[10] !== last_O1_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[10] = O1_expected_prev[10];
	end
	if (
		( O1_expected_prev[11] !== 1'bx ) && ( O1_prev[11] !== O1_expected_prev[11] )
		&& ((O1_expected_prev[11] !== last_O1_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[11] = O1_expected_prev[11];
	end
	if (
		( O1_expected_prev[12] !== 1'bx ) && ( O1_prev[12] !== O1_expected_prev[12] )
		&& ((O1_expected_prev[12] !== last_O1_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[12] = O1_expected_prev[12];
	end
	if (
		( O1_expected_prev[13] !== 1'bx ) && ( O1_prev[13] !== O1_expected_prev[13] )
		&& ((O1_expected_prev[13] !== last_O1_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[13] = O1_expected_prev[13];
	end
	if (
		( O1_expected_prev[14] !== 1'bx ) && ( O1_prev[14] !== O1_expected_prev[14] )
		&& ((O1_expected_prev[14] !== last_O1_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[14] = O1_expected_prev[14];
	end
	if (
		( O1_expected_prev[15] !== 1'bx ) && ( O1_prev[15] !== O1_expected_prev[15] )
		&& ((O1_expected_prev[15] !== last_O1_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O1_exp[15] = O1_expected_prev[15];
	end
	if (
		( O2_expected_prev[0] !== 1'bx ) && ( O2_prev[0] !== O2_expected_prev[0] )
		&& ((O2_expected_prev[0] !== last_O2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[0] = O2_expected_prev[0];
	end
	if (
		( O2_expected_prev[1] !== 1'bx ) && ( O2_prev[1] !== O2_expected_prev[1] )
		&& ((O2_expected_prev[1] !== last_O2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[1] = O2_expected_prev[1];
	end
	if (
		( O2_expected_prev[2] !== 1'bx ) && ( O2_prev[2] !== O2_expected_prev[2] )
		&& ((O2_expected_prev[2] !== last_O2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[2] = O2_expected_prev[2];
	end
	if (
		( O2_expected_prev[3] !== 1'bx ) && ( O2_prev[3] !== O2_expected_prev[3] )
		&& ((O2_expected_prev[3] !== last_O2_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[3] = O2_expected_prev[3];
	end
	if (
		( O2_expected_prev[4] !== 1'bx ) && ( O2_prev[4] !== O2_expected_prev[4] )
		&& ((O2_expected_prev[4] !== last_O2_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[4] = O2_expected_prev[4];
	end
	if (
		( O2_expected_prev[5] !== 1'bx ) && ( O2_prev[5] !== O2_expected_prev[5] )
		&& ((O2_expected_prev[5] !== last_O2_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[5] = O2_expected_prev[5];
	end
	if (
		( O2_expected_prev[6] !== 1'bx ) && ( O2_prev[6] !== O2_expected_prev[6] )
		&& ((O2_expected_prev[6] !== last_O2_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[6] = O2_expected_prev[6];
	end
	if (
		( O2_expected_prev[7] !== 1'bx ) && ( O2_prev[7] !== O2_expected_prev[7] )
		&& ((O2_expected_prev[7] !== last_O2_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[7] = O2_expected_prev[7];
	end
	if (
		( O2_expected_prev[8] !== 1'bx ) && ( O2_prev[8] !== O2_expected_prev[8] )
		&& ((O2_expected_prev[8] !== last_O2_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[8] = O2_expected_prev[8];
	end
	if (
		( O2_expected_prev[9] !== 1'bx ) && ( O2_prev[9] !== O2_expected_prev[9] )
		&& ((O2_expected_prev[9] !== last_O2_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[9] = O2_expected_prev[9];
	end
	if (
		( O2_expected_prev[10] !== 1'bx ) && ( O2_prev[10] !== O2_expected_prev[10] )
		&& ((O2_expected_prev[10] !== last_O2_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[10] = O2_expected_prev[10];
	end
	if (
		( O2_expected_prev[11] !== 1'bx ) && ( O2_prev[11] !== O2_expected_prev[11] )
		&& ((O2_expected_prev[11] !== last_O2_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[11] = O2_expected_prev[11];
	end
	if (
		( O2_expected_prev[12] !== 1'bx ) && ( O2_prev[12] !== O2_expected_prev[12] )
		&& ((O2_expected_prev[12] !== last_O2_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[12] = O2_expected_prev[12];
	end
	if (
		( O2_expected_prev[13] !== 1'bx ) && ( O2_prev[13] !== O2_expected_prev[13] )
		&& ((O2_expected_prev[13] !== last_O2_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[13] = O2_expected_prev[13];
	end
	if (
		( O2_expected_prev[14] !== 1'bx ) && ( O2_prev[14] !== O2_expected_prev[14] )
		&& ((O2_expected_prev[14] !== last_O2_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[14] = O2_expected_prev[14];
	end
	if (
		( O2_expected_prev[15] !== 1'bx ) && ( O2_prev[15] !== O2_expected_prev[15] )
		&& ((O2_expected_prev[15] !== last_O2_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O2_exp[15] = O2_expected_prev[15];
	end
	if (
		( O3_expected_prev[0] !== 1'bx ) && ( O3_prev[0] !== O3_expected_prev[0] )
		&& ((O3_expected_prev[0] !== last_O3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[0] = O3_expected_prev[0];
	end
	if (
		( O3_expected_prev[1] !== 1'bx ) && ( O3_prev[1] !== O3_expected_prev[1] )
		&& ((O3_expected_prev[1] !== last_O3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[1] = O3_expected_prev[1];
	end
	if (
		( O3_expected_prev[2] !== 1'bx ) && ( O3_prev[2] !== O3_expected_prev[2] )
		&& ((O3_expected_prev[2] !== last_O3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[2] = O3_expected_prev[2];
	end
	if (
		( O3_expected_prev[3] !== 1'bx ) && ( O3_prev[3] !== O3_expected_prev[3] )
		&& ((O3_expected_prev[3] !== last_O3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[3] = O3_expected_prev[3];
	end
	if (
		( O3_expected_prev[4] !== 1'bx ) && ( O3_prev[4] !== O3_expected_prev[4] )
		&& ((O3_expected_prev[4] !== last_O3_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[4] = O3_expected_prev[4];
	end
	if (
		( O3_expected_prev[5] !== 1'bx ) && ( O3_prev[5] !== O3_expected_prev[5] )
		&& ((O3_expected_prev[5] !== last_O3_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[5] = O3_expected_prev[5];
	end
	if (
		( O3_expected_prev[6] !== 1'bx ) && ( O3_prev[6] !== O3_expected_prev[6] )
		&& ((O3_expected_prev[6] !== last_O3_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[6] = O3_expected_prev[6];
	end
	if (
		( O3_expected_prev[7] !== 1'bx ) && ( O3_prev[7] !== O3_expected_prev[7] )
		&& ((O3_expected_prev[7] !== last_O3_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[7] = O3_expected_prev[7];
	end
	if (
		( O3_expected_prev[8] !== 1'bx ) && ( O3_prev[8] !== O3_expected_prev[8] )
		&& ((O3_expected_prev[8] !== last_O3_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[8] = O3_expected_prev[8];
	end
	if (
		( O3_expected_prev[9] !== 1'bx ) && ( O3_prev[9] !== O3_expected_prev[9] )
		&& ((O3_expected_prev[9] !== last_O3_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[9] = O3_expected_prev[9];
	end
	if (
		( O3_expected_prev[10] !== 1'bx ) && ( O3_prev[10] !== O3_expected_prev[10] )
		&& ((O3_expected_prev[10] !== last_O3_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[10] = O3_expected_prev[10];
	end
	if (
		( O3_expected_prev[11] !== 1'bx ) && ( O3_prev[11] !== O3_expected_prev[11] )
		&& ((O3_expected_prev[11] !== last_O3_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[11] = O3_expected_prev[11];
	end
	if (
		( O3_expected_prev[12] !== 1'bx ) && ( O3_prev[12] !== O3_expected_prev[12] )
		&& ((O3_expected_prev[12] !== last_O3_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[12] = O3_expected_prev[12];
	end
	if (
		( O3_expected_prev[13] !== 1'bx ) && ( O3_prev[13] !== O3_expected_prev[13] )
		&& ((O3_expected_prev[13] !== last_O3_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[13] = O3_expected_prev[13];
	end
	if (
		( O3_expected_prev[14] !== 1'bx ) && ( O3_prev[14] !== O3_expected_prev[14] )
		&& ((O3_expected_prev[14] !== last_O3_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[14] = O3_expected_prev[14];
	end
	if (
		( O3_expected_prev[15] !== 1'bx ) && ( O3_prev[15] !== O3_expected_prev[15] )
		&& ((O3_expected_prev[15] !== last_O3_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[15] = O3_expected_prev[15];
	end
	if (
		( O3_expected_prev[16] !== 1'bx ) && ( O3_prev[16] !== O3_expected_prev[16] )
		&& ((O3_expected_prev[16] !== last_O3_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[16] = O3_expected_prev[16];
	end
	if (
		( O3_expected_prev[17] !== 1'bx ) && ( O3_prev[17] !== O3_expected_prev[17] )
		&& ((O3_expected_prev[17] !== last_O3_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[17] = O3_expected_prev[17];
	end
	if (
		( O3_expected_prev[18] !== 1'bx ) && ( O3_prev[18] !== O3_expected_prev[18] )
		&& ((O3_expected_prev[18] !== last_O3_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[18] = O3_expected_prev[18];
	end
	if (
		( O3_expected_prev[19] !== 1'bx ) && ( O3_prev[19] !== O3_expected_prev[19] )
		&& ((O3_expected_prev[19] !== last_O3_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[19] = O3_expected_prev[19];
	end
	if (
		( O3_expected_prev[20] !== 1'bx ) && ( O3_prev[20] !== O3_expected_prev[20] )
		&& ((O3_expected_prev[20] !== last_O3_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[20] = O3_expected_prev[20];
	end
	if (
		( O3_expected_prev[21] !== 1'bx ) && ( O3_prev[21] !== O3_expected_prev[21] )
		&& ((O3_expected_prev[21] !== last_O3_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[21] = O3_expected_prev[21];
	end
	if (
		( O3_expected_prev[22] !== 1'bx ) && ( O3_prev[22] !== O3_expected_prev[22] )
		&& ((O3_expected_prev[22] !== last_O3_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[22] = O3_expected_prev[22];
	end
	if (
		( O3_expected_prev[23] !== 1'bx ) && ( O3_prev[23] !== O3_expected_prev[23] )
		&& ((O3_expected_prev[23] !== last_O3_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[23] = O3_expected_prev[23];
	end
	if (
		( O3_expected_prev[24] !== 1'bx ) && ( O3_prev[24] !== O3_expected_prev[24] )
		&& ((O3_expected_prev[24] !== last_O3_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[24] = O3_expected_prev[24];
	end
	if (
		( O3_expected_prev[25] !== 1'bx ) && ( O3_prev[25] !== O3_expected_prev[25] )
		&& ((O3_expected_prev[25] !== last_O3_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[25] = O3_expected_prev[25];
	end
	if (
		( O3_expected_prev[26] !== 1'bx ) && ( O3_prev[26] !== O3_expected_prev[26] )
		&& ((O3_expected_prev[26] !== last_O3_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[26] = O3_expected_prev[26];
	end
	if (
		( O3_expected_prev[27] !== 1'bx ) && ( O3_prev[27] !== O3_expected_prev[27] )
		&& ((O3_expected_prev[27] !== last_O3_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[27] = O3_expected_prev[27];
	end
	if (
		( O3_expected_prev[28] !== 1'bx ) && ( O3_prev[28] !== O3_expected_prev[28] )
		&& ((O3_expected_prev[28] !== last_O3_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[28] = O3_expected_prev[28];
	end
	if (
		( O3_expected_prev[29] !== 1'bx ) && ( O3_prev[29] !== O3_expected_prev[29] )
		&& ((O3_expected_prev[29] !== last_O3_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[29] = O3_expected_prev[29];
	end
	if (
		( O3_expected_prev[30] !== 1'bx ) && ( O3_prev[30] !== O3_expected_prev[30] )
		&& ((O3_expected_prev[30] !== last_O3_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[30] = O3_expected_prev[30];
	end
	if (
		( O3_expected_prev[31] !== 1'bx ) && ( O3_prev[31] !== O3_expected_prev[31] )
		&& ((O3_expected_prev[31] !== last_O3_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O3_exp[31] = O3_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module JSQ_FZN_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] KEY;
reg [17:0] SW;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [2:0] LEDG;
wire LEDG3;
wire [15:0] O1;
wire [15:0] O2;
wire [31:0] O3;

wire sampler;                             

// assign statements (if any)                          
JSQ_FZN_top i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDG3(LEDG3),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.SW(SW)
);

// KEY[1]
initial
begin
	KEY[1] = 1'b1;
	KEY[1] = #310000 1'b0;
	KEY[1] = #30000 1'b1;
	KEY[1] = #70000 1'b0;
	KEY[1] = #30000 1'b1;
end 

// KEY[2]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #100000 1'b0;
	KEY[2] = #30000 1'b1;
	KEY[2] = #230000 1'b0;
	KEY[2] = #20000 1'b1;
end 
// SW[ 17 ]
initial
begin
	SW[17] = 1'b0;
end 
// SW[ 16 ]
initial
begin
	SW[16] = 1'b0;
end 
// SW[ 15 ]
initial
begin
	SW[15] = 1'b0;
end 
// SW[ 14 ]
initial
begin
	SW[14] = 1'b1;
	SW[14] = #300000 1'b0;
	SW[14] = #600000 1'b1;
end 
// SW[ 13 ]
initial
begin
	SW[13] = 1'b0;
end 
// SW[ 12 ]
initial
begin
	SW[12] = 1'b1;
	SW[12] = #300000 1'b0;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b1;
	SW[11] = #300000 1'b0;
	SW[11] = #300000 1'b1;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b1;
	SW[10] = #300000 1'b0;
	SW[10] = #300000 1'b1;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b1;
	SW[9] = #300000 1'b0;
	SW[9] = #600000 1'b1;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
	SW[8] = #300000 1'b1;
	SW[8] = #300000 1'b0;
	SW[8] = #300000 1'b1;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b1;
	SW[7] = #600000 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b1;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b1;
	SW[5] = #600000 1'b0;
	SW[5] = #300000 1'b1;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
	SW[4] = #300000 1'b1;
	SW[4] = #300000 1'b0;
	SW[4] = #300000 1'b1;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b1;
	SW[2] = #300000 1'b0;
	SW[2] = #300000 1'b1;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b1;
	SW[1] = #300000 1'b0;
	SW[1] = #600000 1'b1;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b1;
	SW[0] = #300000 1'b0;
	SW[0] = #300000 1'b1;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b1;
end 

JSQ_FZN_top_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

JSQ_FZN_top_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.LEDG(LEDG),
	.LEDG3(LEDG3),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.sampler_rx(sampler)
);
endmodule

