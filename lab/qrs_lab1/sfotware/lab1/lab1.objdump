
lab1.elf:     file format elf32-littlenios2
lab1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000f7c memsz 0x00000f7c flags r-x
    LOAD off    0x00001f9c vaddr 0x00008f9c paddr 0x0000918c align 2**12
         filesz 0x000001f0 memsz 0x000001f0 flags rw-
    LOAD off    0x0000237c vaddr 0x0000937c paddr 0x0000937c align 2**12
         filesz 0x00000000 memsz 0x0000001c flags rw-
    LOAD off    0x00003000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00014000  00014000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000f48  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00008f68  00008f68  00001f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000001f0  00008f9c  0000918c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000001c  0000937c  0000937c  0000237c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003445  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001284  00000000  00000000  000067c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014a3  00000000  00000000  00007a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d8  00000000  00000000  00008eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a85  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005c0  00000000  00000000  00009e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000030  00000000  00000000  0000a40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  0000a440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000b7b4  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  0000b7b7  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000b7c3  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000b7c4  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000b7c5  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000b7c9  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000b7cd  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000b7d1  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000b7dc  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000b7e7  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000b7f2  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000024  00000000  00000000  0000b7fd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034162  00000000  00000000  0000b821  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00014000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008f68 l    d  .rodata	00000000 .rodata
00008f9c l    d  .rwdata	00000000 .rwdata
0000937c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/altera/13.1/lab/qrs_lab1/sfotware/lab1_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000080c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000821c l     F .text	00000038 alt_dev_reg
00008f9c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00008508 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008664 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008690 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000087ec l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008924 l     F .text	00000050 alt_get_errno
00008974 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000081b4 g     F .text	00000068 alt_main
0000918c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00014000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009394 g     O .bss	00000004 errno
0000938c g     O .bss	00000004 alt_argv
00011170 g       *ABS*	00000000 _gp
00008ff0 g     O .rwdata	00000180 alt_fd_list
00008c14 g     F .text	00000090 alt_find_dev
000088ac g     F .text	00000078 alt_io_redirect
0000837c g     F .text	000000f4 altera_avalon_jtag_uart_read
00008e6c g     F .text	0000008c alt_icache_flush
00009184 g     O .rwdata	00000004 alt_max_fd
00009380 g     O .bss	00000004 r4
00009398 g       *ABS*	00000000 __bss_end
00008fc8 g     O .rwdata	00000028 alt_dev_null
00008620 g     F .text	00000044 alt_dcache_flush_all
0000918c g       *ABS*	00000000 __ram_rwdata_end
0000917c g     O .rwdata	00000008 alt_dev_list
00008f9c g       *ABS*	00000000 __ram_rodata_end
00009398 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008470 g     F .text	00000098 altera_avalon_jtag_uart_write
00008020 g     F .text	0000004c _start
00008288 g     F .text	00000034 alt_sys_init
00008f9c g       *ABS*	00000000 __ram_rwdata_start
00008f68 g       *ABS*	00000000 __ram_rodata_start
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_ram
000082bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00008db8 g     F .text	000000b4 alt_get_fd
00008ef8 g     F .text	00000048 memcmp
00014000 g       *ABS*	00000000 __alt_mem_onchip_memory2_rom
00009398 g       *ABS*	00000000 __alt_stack_base
00008ca4 g     F .text	00000114 alt_find_file
000086e0 g     F .text	000000a0 alt_dev_llist_insert
00009170 g     O .rwdata	00000004 num
0000937c g       *ABS*	00000000 __bss_start
0000806c g     F .text	0000005c main
00009390 g     O .bss	00000004 alt_envp
0000831c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009188 g     O .rwdata	00000004 alt_errno
00008f68 g       *ABS*	00000000 __flash_rodata_start
00008254 g     F .text	00000034 alt_irq_init
00008b94 g     F .text	00000060 alt_release_fd
00009388 g     O .bss	00000004 alt_argc
0000937c g     O .bss	00000004 r2
00009174 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000918c g       *ABS*	00000000 _edata
00009398 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008bf4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000d000 g       *ABS*	00000000 __alt_data_end
00008780 g     F .text	0000003c _exit
00008f40 g     F .text	00000028 strlen
00008a40 g     F .text	00000154 open
000087bc g     F .text	00000030 alt_icache_flush_all
00009384 g     O .bss	00000004 r5
00008558 g     F .text	000000c8 close
00008134 g     F .text	00000080 alt_load



Disassembly of section .entry:

00014000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   14000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   14004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   14008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1400c:	00bffd16 	blt	zero,r2,14004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   14010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   14014:	08600814 	ori	at,at,32800
    jmp r1
   14018:	0800683a 	jmp	at
   1401c:	00000000 	call	0 <__alt_mem_onchip_memory2_ram-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6845c14 	ori	gp,gp,4464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a4df14 	ori	r2,r2,37756

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e4e614 	ori	r3,r3,37784

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00081340 	call	8134 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00081b40 	call	81b4 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <alt_after_alt_main>

0000806c <main>:
#include <stdio.h>


unsigned int num = 0x90abcdef,r4,r5,r2=0;
int main()
{
    806c:	deffff04 	addi	sp,sp,-4
    8070:	df000015 	stw	fp,0(sp)
    8074:	d839883a 	mov	fp,sp
	r4=num;
    8078:	d0a00017 	ldw	r2,-32768(gp)
    807c:	d0a08415 	stw	r2,-32240(gp)
	while(r4)
    8080:	00000a06 	br	80ac <main+0x40>
	{
		r5=r4>>1;
    8084:	d0a08417 	ldw	r2,-32240(gp)
    8088:	1004d07a 	srli	r2,r2,1
    808c:	d0a08515 	stw	r2,-32236(gp)
		r4=r4&r5;
    8090:	d0e08417 	ldw	r3,-32240(gp)
    8094:	d0a08517 	ldw	r2,-32236(gp)
    8098:	1884703a 	and	r2,r3,r2
    809c:	d0a08415 	stw	r2,-32240(gp)
		r2++;
    80a0:	d0a08317 	ldw	r2,-32244(gp)
    80a4:	10800044 	addi	r2,r2,1
    80a8:	d0a08315 	stw	r2,-32244(gp)

unsigned int num = 0x90abcdef,r4,r5,r2=0;
int main()
{
	r4=num;
	while(r4)
    80ac:	d0a08417 	ldw	r2,-32240(gp)
    80b0:	103ff41e 	bne	r2,zero,8084 <main+0x18>
	{
		r5=r4>>1;
		r4=r4&r5;
		r2++;
	}
  return 0;
    80b4:	0005883a 	mov	r2,zero
}
    80b8:	e037883a 	mov	sp,fp
    80bc:	df000017 	ldw	fp,0(sp)
    80c0:	dec00104 	addi	sp,sp,4
    80c4:	f800283a 	ret

000080c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    80c8:	defffc04 	addi	sp,sp,-16
    80cc:	df000315 	stw	fp,12(sp)
    80d0:	df000304 	addi	fp,sp,12
    80d4:	e13ffd15 	stw	r4,-12(fp)
    80d8:	e17ffe15 	stw	r5,-8(fp)
    80dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    80e0:	e0fffe17 	ldw	r3,-8(fp)
    80e4:	e0bffd17 	ldw	r2,-12(fp)
    80e8:	18800e26 	beq	r3,r2,8124 <alt_load_section+0x5c>
  {
    while( to != end )
    80ec:	00000a06 	br	8118 <alt_load_section+0x50>
    {
      *to++ = *from++;
    80f0:	e0bffd17 	ldw	r2,-12(fp)
    80f4:	10c00017 	ldw	r3,0(r2)
    80f8:	e0bffe17 	ldw	r2,-8(fp)
    80fc:	10c00015 	stw	r3,0(r2)
    8100:	e0bffe17 	ldw	r2,-8(fp)
    8104:	10800104 	addi	r2,r2,4
    8108:	e0bffe15 	stw	r2,-8(fp)
    810c:	e0bffd17 	ldw	r2,-12(fp)
    8110:	10800104 	addi	r2,r2,4
    8114:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8118:	e0fffe17 	ldw	r3,-8(fp)
    811c:	e0bfff17 	ldw	r2,-4(fp)
    8120:	18bff31e 	bne	r3,r2,80f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8124:	e037883a 	mov	sp,fp
    8128:	df000017 	ldw	fp,0(sp)
    812c:	dec00104 	addi	sp,sp,4
    8130:	f800283a 	ret

00008134 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8134:	defffe04 	addi	sp,sp,-8
    8138:	dfc00115 	stw	ra,4(sp)
    813c:	df000015 	stw	fp,0(sp)
    8140:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8144:	01000074 	movhi	r4,1
    8148:	21246304 	addi	r4,r4,-28276
    814c:	01400074 	movhi	r5,1
    8150:	2963e704 	addi	r5,r5,-28772
    8154:	01800074 	movhi	r6,1
    8158:	31a46304 	addi	r6,r6,-28276
    815c:	00080c80 	call	80c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8160:	01000074 	movhi	r4,1
    8164:	21200804 	addi	r4,r4,-32736
    8168:	01400074 	movhi	r5,1
    816c:	29600804 	addi	r5,r5,-32736
    8170:	01800074 	movhi	r6,1
    8174:	31a00804 	addi	r6,r6,-32736
    8178:	00080c80 	call	80c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    817c:	01000074 	movhi	r4,1
    8180:	2123da04 	addi	r4,r4,-28824
    8184:	01400074 	movhi	r5,1
    8188:	2963da04 	addi	r5,r5,-28824
    818c:	01800074 	movhi	r6,1
    8190:	31a3e704 	addi	r6,r6,-28772
    8194:	00080c80 	call	80c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8198:	00086200 	call	8620 <alt_dcache_flush_all>
  alt_icache_flush_all();
    819c:	00087bc0 	call	87bc <alt_icache_flush_all>
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

000081b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81b4:	defffd04 	addi	sp,sp,-12
    81b8:	dfc00215 	stw	ra,8(sp)
    81bc:	df000115 	stw	fp,4(sp)
    81c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81c4:	0009883a 	mov	r4,zero
    81c8:	00082540 	call	8254 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    81cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81d0:	00082880 	call	8288 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    81d4:	01000074 	movhi	r4,1
    81d8:	2123da04 	addi	r4,r4,-28824
    81dc:	01400074 	movhi	r5,1
    81e0:	2963da04 	addi	r5,r5,-28824
    81e4:	01800074 	movhi	r6,1
    81e8:	31a3da04 	addi	r6,r6,-28824
    81ec:	00088ac0 	call	88ac <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    81f0:	d1208617 	ldw	r4,-32232(gp)
    81f4:	d0e08717 	ldw	r3,-32228(gp)
    81f8:	d0a08817 	ldw	r2,-32224(gp)
    81fc:	180b883a 	mov	r5,r3
    8200:	100d883a 	mov	r6,r2
    8204:	000806c0 	call	806c <main>
    8208:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    820c:	01000044 	movi	r4,1
    8210:	00085580 	call	8558 <close>
  exit (result);
    8214:	e13fff17 	ldw	r4,-4(fp)
    8218:	00087800 	call	8780 <_exit>

0000821c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    821c:	defffd04 	addi	sp,sp,-12
    8220:	dfc00215 	stw	ra,8(sp)
    8224:	df000115 	stw	fp,4(sp)
    8228:	df000104 	addi	fp,sp,4
    822c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8230:	e13fff17 	ldw	r4,-4(fp)
    8234:	01400074 	movhi	r5,1
    8238:	29645f04 	addi	r5,r5,-28292
    823c:	00086e00 	call	86e0 <alt_dev_llist_insert>
}
    8240:	e037883a 	mov	sp,fp
    8244:	dfc00117 	ldw	ra,4(sp)
    8248:	df000017 	ldw	fp,0(sp)
    824c:	dec00204 	addi	sp,sp,8
    8250:	f800283a 	ret

00008254 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8254:	defffd04 	addi	sp,sp,-12
    8258:	dfc00215 	stw	ra,8(sp)
    825c:	df000115 	stw	fp,4(sp)
    8260:	df000104 	addi	fp,sp,4
    8264:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8268:	0008bf40 	call	8bf4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    826c:	00800044 	movi	r2,1
    8270:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8274:	e037883a 	mov	sp,fp
    8278:	dfc00117 	ldw	ra,4(sp)
    827c:	df000017 	ldw	fp,0(sp)
    8280:	dec00204 	addi	sp,sp,8
    8284:	f800283a 	ret

00008288 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8288:	defffe04 	addi	sp,sp,-8
    828c:	dfc00115 	stw	ra,4(sp)
    8290:	df000015 	stw	fp,0(sp)
    8294:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8298:	01000074 	movhi	r4,1
    829c:	2123e704 	addi	r4,r4,-28772
    82a0:	000821c0 	call	821c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    82a4:	0001883a 	nop
}
    82a8:	e037883a 	mov	sp,fp
    82ac:	dfc00117 	ldw	ra,4(sp)
    82b0:	df000017 	ldw	fp,0(sp)
    82b4:	dec00204 	addi	sp,sp,8
    82b8:	f800283a 	ret

000082bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    82bc:	defffa04 	addi	sp,sp,-24
    82c0:	dfc00515 	stw	ra,20(sp)
    82c4:	df000415 	stw	fp,16(sp)
    82c8:	df000404 	addi	fp,sp,16
    82cc:	e13ffd15 	stw	r4,-12(fp)
    82d0:	e17ffe15 	stw	r5,-8(fp)
    82d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    82d8:	e0bffd17 	ldw	r2,-12(fp)
    82dc:	10800017 	ldw	r2,0(r2)
    82e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    82e4:	e0bffc17 	ldw	r2,-16(fp)
    82e8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    82ec:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    82f0:	10800217 	ldw	r2,8(r2)
    82f4:	1809883a 	mov	r4,r3
    82f8:	e17ffe17 	ldw	r5,-8(fp)
    82fc:	e1bfff17 	ldw	r6,-4(fp)
    8300:	100f883a 	mov	r7,r2
    8304:	000837c0 	call	837c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8308:	e037883a 	mov	sp,fp
    830c:	dfc00117 	ldw	ra,4(sp)
    8310:	df000017 	ldw	fp,0(sp)
    8314:	dec00204 	addi	sp,sp,8
    8318:	f800283a 	ret

0000831c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    831c:	defffa04 	addi	sp,sp,-24
    8320:	dfc00515 	stw	ra,20(sp)
    8324:	df000415 	stw	fp,16(sp)
    8328:	df000404 	addi	fp,sp,16
    832c:	e13ffd15 	stw	r4,-12(fp)
    8330:	e17ffe15 	stw	r5,-8(fp)
    8334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8338:	e0bffd17 	ldw	r2,-12(fp)
    833c:	10800017 	ldw	r2,0(r2)
    8340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8344:	e0bffc17 	ldw	r2,-16(fp)
    8348:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    834c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8350:	10800217 	ldw	r2,8(r2)
    8354:	1809883a 	mov	r4,r3
    8358:	e17ffe17 	ldw	r5,-8(fp)
    835c:	e1bfff17 	ldw	r6,-4(fp)
    8360:	100f883a 	mov	r7,r2
    8364:	00084700 	call	8470 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8368:	e037883a 	mov	sp,fp
    836c:	dfc00117 	ldw	ra,4(sp)
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00204 	addi	sp,sp,8
    8378:	f800283a 	ret

0000837c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    837c:	defff704 	addi	sp,sp,-36
    8380:	df000815 	stw	fp,32(sp)
    8384:	df000804 	addi	fp,sp,32
    8388:	e13ffc15 	stw	r4,-16(fp)
    838c:	e17ffd15 	stw	r5,-12(fp)
    8390:	e1bffe15 	stw	r6,-8(fp)
    8394:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8398:	e0bffc17 	ldw	r2,-16(fp)
    839c:	10800017 	ldw	r2,0(r2)
    83a0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    83a4:	e0bffd17 	ldw	r2,-12(fp)
    83a8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    83ac:	e0bffe17 	ldw	r2,-8(fp)
    83b0:	e0fffd17 	ldw	r3,-12(fp)
    83b4:	1885883a 	add	r2,r3,r2
    83b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    83bc:	00001406 	br	8410 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    83c0:	e0bff917 	ldw	r2,-28(fp)
    83c4:	10800037 	ldwio	r2,0(r2)
    83c8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    83cc:	e0bffb17 	ldw	r2,-20(fp)
    83d0:	10a0000c 	andi	r2,r2,32768
    83d4:	10000826 	beq	r2,zero,83f8 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    83d8:	e0bffb17 	ldw	r2,-20(fp)
    83dc:	1007883a 	mov	r3,r2
    83e0:	e0bff817 	ldw	r2,-32(fp)
    83e4:	10c00005 	stb	r3,0(r2)
    83e8:	e0bff817 	ldw	r2,-32(fp)
    83ec:	10800044 	addi	r2,r2,1
    83f0:	e0bff815 	stw	r2,-32(fp)
    83f4:	00000606 	br	8410 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    83f8:	e0fff817 	ldw	r3,-32(fp)
    83fc:	e0bffd17 	ldw	r2,-12(fp)
    8400:	1880071e 	bne	r3,r2,8420 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    8404:	e0bfff17 	ldw	r2,-4(fp)
    8408:	1090000c 	andi	r2,r2,16384
    840c:	1000061e 	bne	r2,zero,8428 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8410:	e0fff817 	ldw	r3,-32(fp)
    8414:	e0bffa17 	ldw	r2,-24(fp)
    8418:	18bfe936 	bltu	r3,r2,83c0 <altera_avalon_jtag_uart_read+0x44>
    841c:	00000306 	br	842c <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8420:	0001883a 	nop
    8424:	00000106 	br	842c <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    8428:	0001883a 	nop
    
  }

  if (ptr != buffer)
    842c:	e0fff817 	ldw	r3,-32(fp)
    8430:	e0bffd17 	ldw	r2,-12(fp)
    8434:	18800426 	beq	r3,r2,8448 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8438:	e0fff817 	ldw	r3,-32(fp)
    843c:	e0bffd17 	ldw	r2,-12(fp)
    8440:	1885c83a 	sub	r2,r3,r2
    8444:	00000606 	br	8460 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    8448:	e0bfff17 	ldw	r2,-4(fp)
    844c:	1090000c 	andi	r2,r2,16384
    8450:	10000226 	beq	r2,zero,845c <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    8454:	00bffd44 	movi	r2,-11
    8458:	00000106 	br	8460 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    845c:	00bffec4 	movi	r2,-5
}
    8460:	e037883a 	mov	sp,fp
    8464:	df000017 	ldw	fp,0(sp)
    8468:	dec00104 	addi	sp,sp,4
    846c:	f800283a 	ret

00008470 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8470:	defff904 	addi	sp,sp,-28
    8474:	df000615 	stw	fp,24(sp)
    8478:	df000604 	addi	fp,sp,24
    847c:	e13ffc15 	stw	r4,-16(fp)
    8480:	e17ffd15 	stw	r5,-12(fp)
    8484:	e1bffe15 	stw	r6,-8(fp)
    8488:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    848c:	e0bffc17 	ldw	r2,-16(fp)
    8490:	10800017 	ldw	r2,0(r2)
    8494:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8498:	e0bffe17 	ldw	r2,-8(fp)
    849c:	e0fffd17 	ldw	r3,-12(fp)
    84a0:	1885883a 	add	r2,r3,r2
    84a4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    84a8:	00000f06 	br	84e8 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84ac:	e0bffa17 	ldw	r2,-24(fp)
    84b0:	10800104 	addi	r2,r2,4
    84b4:	10800037 	ldwio	r2,0(r2)
    84b8:	10bfffec 	andhi	r2,r2,65535
    84bc:	10000a26 	beq	r2,zero,84e8 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84c0:	e0bffa17 	ldw	r2,-24(fp)
    84c4:	e0fffd17 	ldw	r3,-12(fp)
    84c8:	18c00003 	ldbu	r3,0(r3)
    84cc:	18c03fcc 	andi	r3,r3,255
    84d0:	18c0201c 	xori	r3,r3,128
    84d4:	18ffe004 	addi	r3,r3,-128
    84d8:	e13ffd17 	ldw	r4,-12(fp)
    84dc:	21000044 	addi	r4,r4,1
    84e0:	e13ffd15 	stw	r4,-12(fp)
    84e4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84e8:	e0fffd17 	ldw	r3,-12(fp)
    84ec:	e0bffb17 	ldw	r2,-20(fp)
    84f0:	18bfee36 	bltu	r3,r2,84ac <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    84f4:	e0bffe17 	ldw	r2,-8(fp)
}
    84f8:	e037883a 	mov	sp,fp
    84fc:	df000017 	ldw	fp,0(sp)
    8500:	dec00104 	addi	sp,sp,4
    8504:	f800283a 	ret

00008508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8508:	defffe04 	addi	sp,sp,-8
    850c:	dfc00115 	stw	ra,4(sp)
    8510:	df000015 	stw	fp,0(sp)
    8514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8518:	00800074 	movhi	r2,1
    851c:	10a46204 	addi	r2,r2,-28280
    8520:	10800017 	ldw	r2,0(r2)
    8524:	10000526 	beq	r2,zero,853c <alt_get_errno+0x34>
    8528:	00800074 	movhi	r2,1
    852c:	10a46204 	addi	r2,r2,-28280
    8530:	10800017 	ldw	r2,0(r2)
    8534:	103ee83a 	callr	r2
    8538:	00000206 	br	8544 <alt_get_errno+0x3c>
    853c:	00800074 	movhi	r2,1
    8540:	10a4e504 	addi	r2,r2,-27756
}
    8544:	e037883a 	mov	sp,fp
    8548:	dfc00117 	ldw	ra,4(sp)
    854c:	df000017 	ldw	fp,0(sp)
    8550:	dec00204 	addi	sp,sp,8
    8554:	f800283a 	ret

00008558 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8558:	defffb04 	addi	sp,sp,-20
    855c:	dfc00415 	stw	ra,16(sp)
    8560:	df000315 	stw	fp,12(sp)
    8564:	df000304 	addi	fp,sp,12
    8568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    856c:	e0bfff17 	ldw	r2,-4(fp)
    8570:	10000616 	blt	r2,zero,858c <close+0x34>
    8574:	e0bfff17 	ldw	r2,-4(fp)
    8578:	10c00324 	muli	r3,r2,12
    857c:	00800074 	movhi	r2,1
    8580:	10a3fc04 	addi	r2,r2,-28688
    8584:	1885883a 	add	r2,r3,r2
    8588:	00000106 	br	8590 <close+0x38>
    858c:	0005883a 	mov	r2,zero
    8590:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    8594:	e0bffd17 	ldw	r2,-12(fp)
    8598:	10001826 	beq	r2,zero,85fc <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    859c:	e0bffd17 	ldw	r2,-12(fp)
    85a0:	10800017 	ldw	r2,0(r2)
    85a4:	10800417 	ldw	r2,16(r2)
    85a8:	10000626 	beq	r2,zero,85c4 <close+0x6c>
    85ac:	e0bffd17 	ldw	r2,-12(fp)
    85b0:	10800017 	ldw	r2,0(r2)
    85b4:	10800417 	ldw	r2,16(r2)
    85b8:	e13ffd17 	ldw	r4,-12(fp)
    85bc:	103ee83a 	callr	r2
    85c0:	00000106 	br	85c8 <close+0x70>
    85c4:	0005883a 	mov	r2,zero
    85c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    85cc:	e13fff17 	ldw	r4,-4(fp)
    85d0:	0008b940 	call	8b94 <alt_release_fd>
    if (rval < 0)
    85d4:	e0bffe17 	ldw	r2,-8(fp)
    85d8:	1000060e 	bge	r2,zero,85f4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    85dc:	00085080 	call	8508 <alt_get_errno>
    85e0:	e0fffe17 	ldw	r3,-8(fp)
    85e4:	00c7c83a 	sub	r3,zero,r3
    85e8:	10c00015 	stw	r3,0(r2)
      return -1;
    85ec:	00bfffc4 	movi	r2,-1
    85f0:	00000606 	br	860c <close+0xb4>
    }
    return 0;
    85f4:	0005883a 	mov	r2,zero
    85f8:	00000406 	br	860c <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    85fc:	00085080 	call	8508 <alt_get_errno>
    8600:	00c01444 	movi	r3,81
    8604:	10c00015 	stw	r3,0(r2)
    return -1;
    8608:	00bfffc4 	movi	r2,-1
  }
}
    860c:	e037883a 	mov	sp,fp
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	df000017 	ldw	fp,0(sp)
    8618:	dec00204 	addi	sp,sp,8
    861c:	f800283a 	ret

00008620 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8620:	defffe04 	addi	sp,sp,-8
    8624:	df000115 	stw	fp,4(sp)
    8628:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    862c:	e03fff15 	stw	zero,-4(fp)
    8630:	00000506 	br	8648 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    863c:	e0bfff17 	ldw	r2,-4(fp)
    8640:	10800804 	addi	r2,r2,32
    8644:	e0bfff15 	stw	r2,-4(fp)
    8648:	e0bfff17 	ldw	r2,-4(fp)
    864c:	10820030 	cmpltui	r2,r2,2048
    8650:	103ff81e 	bne	r2,zero,8634 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8654:	e037883a 	mov	sp,fp
    8658:	df000017 	ldw	fp,0(sp)
    865c:	dec00104 	addi	sp,sp,4
    8660:	f800283a 	ret

00008664 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8664:	defffc04 	addi	sp,sp,-16
    8668:	df000315 	stw	fp,12(sp)
    866c:	df000304 	addi	fp,sp,12
    8670:	e13ffd15 	stw	r4,-12(fp)
    8674:	e17ffe15 	stw	r5,-8(fp)
    8678:	e1bfff15 	stw	r6,-4(fp)
  return len;
    867c:	e0bfff17 	ldw	r2,-4(fp)
}
    8680:	e037883a 	mov	sp,fp
    8684:	df000017 	ldw	fp,0(sp)
    8688:	dec00104 	addi	sp,sp,4
    868c:	f800283a 	ret

00008690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8690:	defffe04 	addi	sp,sp,-8
    8694:	dfc00115 	stw	ra,4(sp)
    8698:	df000015 	stw	fp,0(sp)
    869c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    86a0:	00800074 	movhi	r2,1
    86a4:	10a46204 	addi	r2,r2,-28280
    86a8:	10800017 	ldw	r2,0(r2)
    86ac:	10000526 	beq	r2,zero,86c4 <alt_get_errno+0x34>
    86b0:	00800074 	movhi	r2,1
    86b4:	10a46204 	addi	r2,r2,-28280
    86b8:	10800017 	ldw	r2,0(r2)
    86bc:	103ee83a 	callr	r2
    86c0:	00000206 	br	86cc <alt_get_errno+0x3c>
    86c4:	00800074 	movhi	r2,1
    86c8:	10a4e504 	addi	r2,r2,-27756
}
    86cc:	e037883a 	mov	sp,fp
    86d0:	dfc00117 	ldw	ra,4(sp)
    86d4:	df000017 	ldw	fp,0(sp)
    86d8:	dec00204 	addi	sp,sp,8
    86dc:	f800283a 	ret

000086e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    86e0:	defffa04 	addi	sp,sp,-24
    86e4:	dfc00515 	stw	ra,20(sp)
    86e8:	df000415 	stw	fp,16(sp)
    86ec:	df000404 	addi	fp,sp,16
    86f0:	e13ffe15 	stw	r4,-8(fp)
    86f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    86f8:	e0bffe17 	ldw	r2,-8(fp)
    86fc:	10000326 	beq	r2,zero,870c <alt_dev_llist_insert+0x2c>
    8700:	e0bffe17 	ldw	r2,-8(fp)
    8704:	10800217 	ldw	r2,8(r2)
    8708:	1000051e 	bne	r2,zero,8720 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    870c:	00086900 	call	8690 <alt_get_errno>
    8710:	00c00584 	movi	r3,22
    8714:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8718:	00bffa84 	movi	r2,-22
    871c:	00001306 	br	876c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8720:	e0bffe17 	ldw	r2,-8(fp)
    8724:	e0ffff17 	ldw	r3,-4(fp)
    8728:	e0fffc15 	stw	r3,-16(fp)
    872c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8730:	e0bffd17 	ldw	r2,-12(fp)
    8734:	e0fffc17 	ldw	r3,-16(fp)
    8738:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    873c:	e0bffc17 	ldw	r2,-16(fp)
    8740:	10c00017 	ldw	r3,0(r2)
    8744:	e0bffd17 	ldw	r2,-12(fp)
    8748:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    874c:	e0bffc17 	ldw	r2,-16(fp)
    8750:	10800017 	ldw	r2,0(r2)
    8754:	e0fffd17 	ldw	r3,-12(fp)
    8758:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    875c:	e0bffc17 	ldw	r2,-16(fp)
    8760:	e0fffd17 	ldw	r3,-12(fp)
    8764:	10c00015 	stw	r3,0(r2)

  return 0;  
    8768:	0005883a 	mov	r2,zero
}
    876c:	e037883a 	mov	sp,fp
    8770:	dfc00117 	ldw	ra,4(sp)
    8774:	df000017 	ldw	fp,0(sp)
    8778:	dec00204 	addi	sp,sp,8
    877c:	f800283a 	ret

00008780 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8780:	defffc04 	addi	sp,sp,-16
    8784:	df000315 	stw	fp,12(sp)
    8788:	df000304 	addi	fp,sp,12
    878c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8790:	0001883a 	nop
    8794:	e0bfff17 	ldw	r2,-4(fp)
    8798:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    879c:	e0bffd17 	ldw	r2,-12(fp)
    87a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    87a4:	e0bffe17 	ldw	r2,-8(fp)
    87a8:	10000226 	beq	r2,zero,87b4 <_exit+0x34>
    ALT_SIM_FAIL();
    87ac:	002af070 	cmpltui	zero,zero,43969
    87b0:	00000106 	br	87b8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    87b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    87b8:	003fff06 	br	87b8 <_exit+0x38>

000087bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    87bc:	defffe04 	addi	sp,sp,-8
    87c0:	dfc00115 	stw	ra,4(sp)
    87c4:	df000015 	stw	fp,0(sp)
    87c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    87cc:	0009883a 	mov	r4,zero
    87d0:	01440004 	movi	r5,4096
    87d4:	0008e6c0 	call	8e6c <alt_icache_flush>
#endif
}
    87d8:	e037883a 	mov	sp,fp
    87dc:	dfc00117 	ldw	ra,4(sp)
    87e0:	df000017 	ldw	fp,0(sp)
    87e4:	dec00204 	addi	sp,sp,8
    87e8:	f800283a 	ret

000087ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    87ec:	defff904 	addi	sp,sp,-28
    87f0:	dfc00615 	stw	ra,24(sp)
    87f4:	df000515 	stw	fp,20(sp)
    87f8:	df000504 	addi	fp,sp,20
    87fc:	e13ffc15 	stw	r4,-16(fp)
    8800:	e17ffd15 	stw	r5,-12(fp)
    8804:	e1bffe15 	stw	r6,-8(fp)
    8808:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    880c:	e13ffd17 	ldw	r4,-12(fp)
    8810:	e17ffe17 	ldw	r5,-8(fp)
    8814:	e1bfff17 	ldw	r6,-4(fp)
    8818:	0008a400 	call	8a40 <open>
    881c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8820:	e0bffb17 	ldw	r2,-20(fp)
    8824:	10001c16 	blt	r2,zero,8898 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    8828:	00c00074 	movhi	r3,1
    882c:	18e3fc04 	addi	r3,r3,-28688
    8830:	e0bffb17 	ldw	r2,-20(fp)
    8834:	10800324 	muli	r2,r2,12
    8838:	1885883a 	add	r2,r3,r2
    883c:	10c00017 	ldw	r3,0(r2)
    8840:	e0bffc17 	ldw	r2,-16(fp)
    8844:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8848:	00c00074 	movhi	r3,1
    884c:	18e3fc04 	addi	r3,r3,-28688
    8850:	e0bffb17 	ldw	r2,-20(fp)
    8854:	10800324 	muli	r2,r2,12
    8858:	1885883a 	add	r2,r3,r2
    885c:	10800104 	addi	r2,r2,4
    8860:	10c00017 	ldw	r3,0(r2)
    8864:	e0bffc17 	ldw	r2,-16(fp)
    8868:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    886c:	00c00074 	movhi	r3,1
    8870:	18e3fc04 	addi	r3,r3,-28688
    8874:	e0bffb17 	ldw	r2,-20(fp)
    8878:	10800324 	muli	r2,r2,12
    887c:	1885883a 	add	r2,r3,r2
    8880:	10800204 	addi	r2,r2,8
    8884:	10c00017 	ldw	r3,0(r2)
    8888:	e0bffc17 	ldw	r2,-16(fp)
    888c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8890:	e13ffb17 	ldw	r4,-20(fp)
    8894:	0008b940 	call	8b94 <alt_release_fd>
  }
} 
    8898:	e037883a 	mov	sp,fp
    889c:	dfc00117 	ldw	ra,4(sp)
    88a0:	df000017 	ldw	fp,0(sp)
    88a4:	dec00204 	addi	sp,sp,8
    88a8:	f800283a 	ret

000088ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    88ac:	defffb04 	addi	sp,sp,-20
    88b0:	dfc00415 	stw	ra,16(sp)
    88b4:	df000315 	stw	fp,12(sp)
    88b8:	df000304 	addi	fp,sp,12
    88bc:	e13ffd15 	stw	r4,-12(fp)
    88c0:	e17ffe15 	stw	r5,-8(fp)
    88c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    88c8:	01000074 	movhi	r4,1
    88cc:	2123ff04 	addi	r4,r4,-28676
    88d0:	e17ffd17 	ldw	r5,-12(fp)
    88d4:	01800044 	movi	r6,1
    88d8:	01c07fc4 	movi	r7,511
    88dc:	00087ec0 	call	87ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    88e0:	01000074 	movhi	r4,1
    88e4:	2123fc04 	addi	r4,r4,-28688
    88e8:	e17ffe17 	ldw	r5,-8(fp)
    88ec:	000d883a 	mov	r6,zero
    88f0:	01c07fc4 	movi	r7,511
    88f4:	00087ec0 	call	87ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    88f8:	01000074 	movhi	r4,1
    88fc:	21240204 	addi	r4,r4,-28664
    8900:	e17fff17 	ldw	r5,-4(fp)
    8904:	01800044 	movi	r6,1
    8908:	01c07fc4 	movi	r7,511
    890c:	00087ec0 	call	87ec <alt_open_fd>
}  
    8910:	e037883a 	mov	sp,fp
    8914:	dfc00117 	ldw	ra,4(sp)
    8918:	df000017 	ldw	fp,0(sp)
    891c:	dec00204 	addi	sp,sp,8
    8920:	f800283a 	ret

00008924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8924:	defffe04 	addi	sp,sp,-8
    8928:	dfc00115 	stw	ra,4(sp)
    892c:	df000015 	stw	fp,0(sp)
    8930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8934:	00800074 	movhi	r2,1
    8938:	10a46204 	addi	r2,r2,-28280
    893c:	10800017 	ldw	r2,0(r2)
    8940:	10000526 	beq	r2,zero,8958 <alt_get_errno+0x34>
    8944:	00800074 	movhi	r2,1
    8948:	10a46204 	addi	r2,r2,-28280
    894c:	10800017 	ldw	r2,0(r2)
    8950:	103ee83a 	callr	r2
    8954:	00000206 	br	8960 <alt_get_errno+0x3c>
    8958:	00800074 	movhi	r2,1
    895c:	10a4e504 	addi	r2,r2,-27756
}
    8960:	e037883a 	mov	sp,fp
    8964:	dfc00117 	ldw	ra,4(sp)
    8968:	df000017 	ldw	fp,0(sp)
    896c:	dec00204 	addi	sp,sp,8
    8970:	f800283a 	ret

00008974 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8974:	defffd04 	addi	sp,sp,-12
    8978:	df000215 	stw	fp,8(sp)
    897c:	df000204 	addi	fp,sp,8
    8980:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8984:	e0bfff17 	ldw	r2,-4(fp)
    8988:	10800217 	ldw	r2,8(r2)
    898c:	10d00034 	orhi	r3,r2,16384
    8990:	e0bfff17 	ldw	r2,-4(fp)
    8994:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8998:	e03ffe15 	stw	zero,-8(fp)
    899c:	00001d06 	br	8a14 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    89a0:	00c00074 	movhi	r3,1
    89a4:	18e3fc04 	addi	r3,r3,-28688
    89a8:	e0bffe17 	ldw	r2,-8(fp)
    89ac:	10800324 	muli	r2,r2,12
    89b0:	1885883a 	add	r2,r3,r2
    89b4:	10c00017 	ldw	r3,0(r2)
    89b8:	e0bfff17 	ldw	r2,-4(fp)
    89bc:	10800017 	ldw	r2,0(r2)
    89c0:	1880111e 	bne	r3,r2,8a08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    89c4:	00c00074 	movhi	r3,1
    89c8:	18e3fc04 	addi	r3,r3,-28688
    89cc:	e0bffe17 	ldw	r2,-8(fp)
    89d0:	10800324 	muli	r2,r2,12
    89d4:	1885883a 	add	r2,r3,r2
    89d8:	10800204 	addi	r2,r2,8
    89dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    89e0:	1000090e 	bge	r2,zero,8a08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    89e4:	e0bffe17 	ldw	r2,-8(fp)
    89e8:	10c00324 	muli	r3,r2,12
    89ec:	00800074 	movhi	r2,1
    89f0:	10a3fc04 	addi	r2,r2,-28688
    89f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    89f8:	e0bfff17 	ldw	r2,-4(fp)
    89fc:	18800226 	beq	r3,r2,8a08 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8a00:	00bffcc4 	movi	r2,-13
    8a04:	00000a06 	br	8a30 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8a08:	e0bffe17 	ldw	r2,-8(fp)
    8a0c:	10800044 	addi	r2,r2,1
    8a10:	e0bffe15 	stw	r2,-8(fp)
    8a14:	00800074 	movhi	r2,1
    8a18:	10a46104 	addi	r2,r2,-28284
    8a1c:	10800017 	ldw	r2,0(r2)
    8a20:	1007883a 	mov	r3,r2
    8a24:	e0bffe17 	ldw	r2,-8(fp)
    8a28:	18bfdd2e 	bgeu	r3,r2,89a0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8a2c:	0005883a 	mov	r2,zero
}
    8a30:	e037883a 	mov	sp,fp
    8a34:	df000017 	ldw	fp,0(sp)
    8a38:	dec00104 	addi	sp,sp,4
    8a3c:	f800283a 	ret

00008a40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8a40:	defff604 	addi	sp,sp,-40
    8a44:	dfc00915 	stw	ra,36(sp)
    8a48:	df000815 	stw	fp,32(sp)
    8a4c:	df000804 	addi	fp,sp,32
    8a50:	e13ffd15 	stw	r4,-12(fp)
    8a54:	e17ffe15 	stw	r5,-8(fp)
    8a58:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8a5c:	00bfffc4 	movi	r2,-1
    8a60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8a64:	00bffb44 	movi	r2,-19
    8a68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8a6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8a70:	e13ffd17 	ldw	r4,-12(fp)
    8a74:	01400074 	movhi	r5,1
    8a78:	29645f04 	addi	r5,r5,-28292
    8a7c:	0008c140 	call	8c14 <alt_find_dev>
    8a80:	e0bff815 	stw	r2,-32(fp)
    8a84:	e0bff817 	ldw	r2,-32(fp)
    8a88:	1000051e 	bne	r2,zero,8aa0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8a8c:	e13ffd17 	ldw	r4,-12(fp)
    8a90:	0008ca40 	call	8ca4 <alt_find_file>
    8a94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8a98:	00800044 	movi	r2,1
    8a9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8aa0:	e0bff817 	ldw	r2,-32(fp)
    8aa4:	10002926 	beq	r2,zero,8b4c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8aa8:	e13ff817 	ldw	r4,-32(fp)
    8aac:	0008db80 	call	8db8 <alt_get_fd>
    8ab0:	e0bff915 	stw	r2,-28(fp)
    8ab4:	e0bff917 	ldw	r2,-28(fp)
    8ab8:	1000030e 	bge	r2,zero,8ac8 <open+0x88>
    {
      status = index;
    8abc:	e0bff917 	ldw	r2,-28(fp)
    8ac0:	e0bffa15 	stw	r2,-24(fp)
    8ac4:	00002306 	br	8b54 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    8ac8:	e0bff917 	ldw	r2,-28(fp)
    8acc:	10c00324 	muli	r3,r2,12
    8ad0:	00800074 	movhi	r2,1
    8ad4:	10a3fc04 	addi	r2,r2,-28688
    8ad8:	1885883a 	add	r2,r3,r2
    8adc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8ae0:	e0fffe17 	ldw	r3,-8(fp)
    8ae4:	00900034 	movhi	r2,16384
    8ae8:	10bfffc4 	addi	r2,r2,-1
    8aec:	1886703a 	and	r3,r3,r2
    8af0:	e0bffc17 	ldw	r2,-16(fp)
    8af4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8af8:	e0bffb17 	ldw	r2,-20(fp)
    8afc:	1000051e 	bne	r2,zero,8b14 <open+0xd4>
    8b00:	e13ffc17 	ldw	r4,-16(fp)
    8b04:	00089740 	call	8974 <alt_file_locked>
    8b08:	e0bffa15 	stw	r2,-24(fp)
    8b0c:	e0bffa17 	ldw	r2,-24(fp)
    8b10:	10001016 	blt	r2,zero,8b54 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8b14:	e0bff817 	ldw	r2,-32(fp)
    8b18:	10800317 	ldw	r2,12(r2)
    8b1c:	10000826 	beq	r2,zero,8b40 <open+0x100>
    8b20:	e0bff817 	ldw	r2,-32(fp)
    8b24:	10800317 	ldw	r2,12(r2)
    8b28:	e13ffc17 	ldw	r4,-16(fp)
    8b2c:	e17ffd17 	ldw	r5,-12(fp)
    8b30:	e1bffe17 	ldw	r6,-8(fp)
    8b34:	e1ffff17 	ldw	r7,-4(fp)
    8b38:	103ee83a 	callr	r2
    8b3c:	00000106 	br	8b44 <open+0x104>
    8b40:	0005883a 	mov	r2,zero
    8b44:	e0bffa15 	stw	r2,-24(fp)
    8b48:	00000206 	br	8b54 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8b4c:	00bffb44 	movi	r2,-19
    8b50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8b54:	e0bffa17 	ldw	r2,-24(fp)
    8b58:	1000080e 	bge	r2,zero,8b7c <open+0x13c>
  {
    alt_release_fd (index);  
    8b5c:	e13ff917 	ldw	r4,-28(fp)
    8b60:	0008b940 	call	8b94 <alt_release_fd>
    ALT_ERRNO = -status;
    8b64:	00089240 	call	8924 <alt_get_errno>
    8b68:	e0fffa17 	ldw	r3,-24(fp)
    8b6c:	00c7c83a 	sub	r3,zero,r3
    8b70:	10c00015 	stw	r3,0(r2)
    return -1;
    8b74:	00bfffc4 	movi	r2,-1
    8b78:	00000106 	br	8b80 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    8b7c:	e0bff917 	ldw	r2,-28(fp)
}
    8b80:	e037883a 	mov	sp,fp
    8b84:	dfc00117 	ldw	ra,4(sp)
    8b88:	df000017 	ldw	fp,0(sp)
    8b8c:	dec00204 	addi	sp,sp,8
    8b90:	f800283a 	ret

00008b94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8b94:	defffe04 	addi	sp,sp,-8
    8b98:	df000115 	stw	fp,4(sp)
    8b9c:	df000104 	addi	fp,sp,4
    8ba0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8ba4:	e0bfff17 	ldw	r2,-4(fp)
    8ba8:	108000d0 	cmplti	r2,r2,3
    8bac:	10000d1e 	bne	r2,zero,8be4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    8bb0:	00c00074 	movhi	r3,1
    8bb4:	18e3fc04 	addi	r3,r3,-28688
    8bb8:	e0bfff17 	ldw	r2,-4(fp)
    8bbc:	10800324 	muli	r2,r2,12
    8bc0:	1885883a 	add	r2,r3,r2
    8bc4:	10800204 	addi	r2,r2,8
    8bc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8bcc:	00c00074 	movhi	r3,1
    8bd0:	18e3fc04 	addi	r3,r3,-28688
    8bd4:	e0bfff17 	ldw	r2,-4(fp)
    8bd8:	10800324 	muli	r2,r2,12
    8bdc:	1885883a 	add	r2,r3,r2
    8be0:	10000015 	stw	zero,0(r2)
  }
}
    8be4:	e037883a 	mov	sp,fp
    8be8:	df000017 	ldw	fp,0(sp)
    8bec:	dec00104 	addi	sp,sp,4
    8bf0:	f800283a 	ret

00008bf4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    8bf4:	deffff04 	addi	sp,sp,-4
    8bf8:	df000015 	stw	fp,0(sp)
    8bfc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8c00:	000170fa 	wrctl	ienable,zero
}
    8c04:	e037883a 	mov	sp,fp
    8c08:	df000017 	ldw	fp,0(sp)
    8c0c:	dec00104 	addi	sp,sp,4
    8c10:	f800283a 	ret

00008c14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8c14:	defffa04 	addi	sp,sp,-24
    8c18:	dfc00515 	stw	ra,20(sp)
    8c1c:	df000415 	stw	fp,16(sp)
    8c20:	df000404 	addi	fp,sp,16
    8c24:	e13ffe15 	stw	r4,-8(fp)
    8c28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8c2c:	e0bfff17 	ldw	r2,-4(fp)
    8c30:	10800017 	ldw	r2,0(r2)
    8c34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8c38:	e13ffe17 	ldw	r4,-8(fp)
    8c3c:	0008f400 	call	8f40 <strlen>
    8c40:	10800044 	addi	r2,r2,1
    8c44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8c48:	00000d06 	br	8c80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8c4c:	e0bffc17 	ldw	r2,-16(fp)
    8c50:	10c00217 	ldw	r3,8(r2)
    8c54:	e0bffd17 	ldw	r2,-12(fp)
    8c58:	1809883a 	mov	r4,r3
    8c5c:	e17ffe17 	ldw	r5,-8(fp)
    8c60:	100d883a 	mov	r6,r2
    8c64:	0008ef80 	call	8ef8 <memcmp>
    8c68:	1000021e 	bne	r2,zero,8c74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8c6c:	e0bffc17 	ldw	r2,-16(fp)
    8c70:	00000706 	br	8c90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8c74:	e0bffc17 	ldw	r2,-16(fp)
    8c78:	10800017 	ldw	r2,0(r2)
    8c7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8c80:	e0fffc17 	ldw	r3,-16(fp)
    8c84:	e0bfff17 	ldw	r2,-4(fp)
    8c88:	18bff01e 	bne	r3,r2,8c4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8c8c:	0005883a 	mov	r2,zero
}
    8c90:	e037883a 	mov	sp,fp
    8c94:	dfc00117 	ldw	ra,4(sp)
    8c98:	df000017 	ldw	fp,0(sp)
    8c9c:	dec00204 	addi	sp,sp,8
    8ca0:	f800283a 	ret

00008ca4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8ca4:	defffb04 	addi	sp,sp,-20
    8ca8:	dfc00415 	stw	ra,16(sp)
    8cac:	df000315 	stw	fp,12(sp)
    8cb0:	df000304 	addi	fp,sp,12
    8cb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8cb8:	00800074 	movhi	r2,1
    8cbc:	10a45d04 	addi	r2,r2,-28300
    8cc0:	10800017 	ldw	r2,0(r2)
    8cc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8cc8:	00003106 	br	8d90 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    8ccc:	e0bffd17 	ldw	r2,-12(fp)
    8cd0:	10800217 	ldw	r2,8(r2)
    8cd4:	1009883a 	mov	r4,r2
    8cd8:	0008f400 	call	8f40 <strlen>
    8cdc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    8ce0:	e0bffd17 	ldw	r2,-12(fp)
    8ce4:	10c00217 	ldw	r3,8(r2)
    8ce8:	e0bffe17 	ldw	r2,-8(fp)
    8cec:	10bfffc4 	addi	r2,r2,-1
    8cf0:	1885883a 	add	r2,r3,r2
    8cf4:	10800003 	ldbu	r2,0(r2)
    8cf8:	10803fcc 	andi	r2,r2,255
    8cfc:	1080201c 	xori	r2,r2,128
    8d00:	10bfe004 	addi	r2,r2,-128
    8d04:	10800bd8 	cmpnei	r2,r2,47
    8d08:	1000031e 	bne	r2,zero,8d18 <alt_find_file+0x74>
    {
      len -= 1;
    8d0c:	e0bffe17 	ldw	r2,-8(fp)
    8d10:	10bfffc4 	addi	r2,r2,-1
    8d14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8d18:	e0bffe17 	ldw	r2,-8(fp)
    8d1c:	e0ffff17 	ldw	r3,-4(fp)
    8d20:	1885883a 	add	r2,r3,r2
    8d24:	10800003 	ldbu	r2,0(r2)
    8d28:	10803fcc 	andi	r2,r2,255
    8d2c:	1080201c 	xori	r2,r2,128
    8d30:	10bfe004 	addi	r2,r2,-128
    8d34:	10800be0 	cmpeqi	r2,r2,47
    8d38:	1000081e 	bne	r2,zero,8d5c <alt_find_file+0xb8>
    8d3c:	e0bffe17 	ldw	r2,-8(fp)
    8d40:	e0ffff17 	ldw	r3,-4(fp)
    8d44:	1885883a 	add	r2,r3,r2
    8d48:	10800003 	ldbu	r2,0(r2)
    8d4c:	10803fcc 	andi	r2,r2,255
    8d50:	1080201c 	xori	r2,r2,128
    8d54:	10bfe004 	addi	r2,r2,-128
    8d58:	10000a1e 	bne	r2,zero,8d84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    8d5c:	e0bffd17 	ldw	r2,-12(fp)
    8d60:	10c00217 	ldw	r3,8(r2)
    8d64:	e0bffe17 	ldw	r2,-8(fp)
    8d68:	1809883a 	mov	r4,r3
    8d6c:	e17fff17 	ldw	r5,-4(fp)
    8d70:	100d883a 	mov	r6,r2
    8d74:	0008ef80 	call	8ef8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8d78:	1000021e 	bne	r2,zero,8d84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    8d7c:	e0bffd17 	ldw	r2,-12(fp)
    8d80:	00000806 	br	8da4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    8d84:	e0bffd17 	ldw	r2,-12(fp)
    8d88:	10800017 	ldw	r2,0(r2)
    8d8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8d90:	e0fffd17 	ldw	r3,-12(fp)
    8d94:	00800074 	movhi	r2,1
    8d98:	10a45d04 	addi	r2,r2,-28300
    8d9c:	18bfcb1e 	bne	r3,r2,8ccc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    8da0:	0005883a 	mov	r2,zero
}
    8da4:	e037883a 	mov	sp,fp
    8da8:	dfc00117 	ldw	ra,4(sp)
    8dac:	df000017 	ldw	fp,0(sp)
    8db0:	dec00204 	addi	sp,sp,8
    8db4:	f800283a 	ret

00008db8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    8db8:	defffc04 	addi	sp,sp,-16
    8dbc:	df000315 	stw	fp,12(sp)
    8dc0:	df000304 	addi	fp,sp,12
    8dc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    8dc8:	00bffa04 	movi	r2,-24
    8dcc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8dd0:	e03ffd15 	stw	zero,-12(fp)
    8dd4:	00001d06 	br	8e4c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    8dd8:	00c00074 	movhi	r3,1
    8ddc:	18e3fc04 	addi	r3,r3,-28688
    8de0:	e0bffd17 	ldw	r2,-12(fp)
    8de4:	10800324 	muli	r2,r2,12
    8de8:	1885883a 	add	r2,r3,r2
    8dec:	10800017 	ldw	r2,0(r2)
    8df0:	1000131e 	bne	r2,zero,8e40 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    8df4:	00c00074 	movhi	r3,1
    8df8:	18e3fc04 	addi	r3,r3,-28688
    8dfc:	e0bffd17 	ldw	r2,-12(fp)
    8e00:	10800324 	muli	r2,r2,12
    8e04:	1885883a 	add	r2,r3,r2
    8e08:	e0ffff17 	ldw	r3,-4(fp)
    8e0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    8e10:	00800074 	movhi	r2,1
    8e14:	10a46104 	addi	r2,r2,-28284
    8e18:	10c00017 	ldw	r3,0(r2)
    8e1c:	e0bffd17 	ldw	r2,-12(fp)
    8e20:	1880040e 	bge	r3,r2,8e34 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    8e24:	00800074 	movhi	r2,1
    8e28:	10a46104 	addi	r2,r2,-28284
    8e2c:	e0fffd17 	ldw	r3,-12(fp)
    8e30:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    8e34:	e0bffd17 	ldw	r2,-12(fp)
    8e38:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    8e3c:	00000606 	br	8e58 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8e40:	e0bffd17 	ldw	r2,-12(fp)
    8e44:	10800044 	addi	r2,r2,1
    8e48:	e0bffd15 	stw	r2,-12(fp)
    8e4c:	e0bffd17 	ldw	r2,-12(fp)
    8e50:	10800810 	cmplti	r2,r2,32
    8e54:	103fe01e 	bne	r2,zero,8dd8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    8e58:	e0bffe17 	ldw	r2,-8(fp)
}
    8e5c:	e037883a 	mov	sp,fp
    8e60:	df000017 	ldw	fp,0(sp)
    8e64:	dec00104 	addi	sp,sp,4
    8e68:	f800283a 	ret

00008e6c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    8e6c:	defffb04 	addi	sp,sp,-20
    8e70:	df000415 	stw	fp,16(sp)
    8e74:	df000404 	addi	fp,sp,16
    8e78:	e13ffe15 	stw	r4,-8(fp)
    8e7c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    8e80:	e0bfff17 	ldw	r2,-4(fp)
    8e84:	10840070 	cmpltui	r2,r2,4097
    8e88:	1000021e 	bne	r2,zero,8e94 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    8e8c:	00840004 	movi	r2,4096
    8e90:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    8e94:	e0fffe17 	ldw	r3,-8(fp)
    8e98:	e0bfff17 	ldw	r2,-4(fp)
    8e9c:	1885883a 	add	r2,r3,r2
    8ea0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8ea4:	e0bffe17 	ldw	r2,-8(fp)
    8ea8:	e0bffc15 	stw	r2,-16(fp)
    8eac:	00000506 	br	8ec4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8eb0:	e0bffc17 	ldw	r2,-16(fp)
    8eb4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8eb8:	e0bffc17 	ldw	r2,-16(fp)
    8ebc:	10800804 	addi	r2,r2,32
    8ec0:	e0bffc15 	stw	r2,-16(fp)
    8ec4:	e0fffc17 	ldw	r3,-16(fp)
    8ec8:	e0bffd17 	ldw	r2,-12(fp)
    8ecc:	18bff836 	bltu	r3,r2,8eb0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8ed0:	e0bffe17 	ldw	r2,-8(fp)
    8ed4:	108007cc 	andi	r2,r2,31
    8ed8:	10000226 	beq	r2,zero,8ee4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8edc:	e0bffc17 	ldw	r2,-16(fp)
    8ee0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8ee4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    8ee8:	e037883a 	mov	sp,fp
    8eec:	df000017 	ldw	fp,0(sp)
    8ef0:	dec00104 	addi	sp,sp,4
    8ef4:	f800283a 	ret

00008ef8 <memcmp>:
    8ef8:	30000d26 	beq	r6,zero,8f30 <memcmp+0x38>
    8efc:	20c00003 	ldbu	r3,0(r4)
    8f00:	28800003 	ldbu	r2,0(r5)
    8f04:	18800c1e 	bne	r3,r2,8f38 <memcmp+0x40>
    8f08:	31bfff84 	addi	r6,r6,-2
    8f0c:	01ffffc4 	movi	r7,-1
    8f10:	00000406 	br	8f24 <memcmp+0x2c>
    8f14:	20c00003 	ldbu	r3,0(r4)
    8f18:	28800003 	ldbu	r2,0(r5)
    8f1c:	31bfffc4 	addi	r6,r6,-1
    8f20:	1880051e 	bne	r3,r2,8f38 <memcmp+0x40>
    8f24:	21000044 	addi	r4,r4,1
    8f28:	29400044 	addi	r5,r5,1
    8f2c:	31fff91e 	bne	r6,r7,8f14 <memcmp+0x1c>
    8f30:	0005883a 	mov	r2,zero
    8f34:	f800283a 	ret
    8f38:	1885c83a 	sub	r2,r3,r2
    8f3c:	f800283a 	ret

00008f40 <strlen>:
    8f40:	20800007 	ldb	r2,0(r4)
    8f44:	10000626 	beq	r2,zero,8f60 <strlen+0x20>
    8f48:	2005883a 	mov	r2,r4
    8f4c:	10800044 	addi	r2,r2,1
    8f50:	10c00007 	ldb	r3,0(r2)
    8f54:	183ffd1e 	bne	r3,zero,8f4c <strlen+0xc>
    8f58:	1105c83a 	sub	r2,r2,r4
    8f5c:	f800283a 	ret
    8f60:	0005883a 	mov	r2,zero
    8f64:	f800283a 	ret
