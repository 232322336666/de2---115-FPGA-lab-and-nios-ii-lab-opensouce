// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2019 16:32:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part2_another
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part2_another_vlg_sample_tst(
	KEY,
	SW,
	sampler_tx
);
input [1:0] KEY;
input [16:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module part2_another_vlg_check_tst (
	HEX0,
	HEX1,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	LEDG,
	LEDR,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [8:8] LEDG;
input [7:0] LEDR;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [8:8] LEDG_expected;
reg [7:0] LEDR_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [8:8] LEDG_prev;
reg [7:0] LEDR_prev;

reg [7:0] LEDR_expected_prev;

reg [7:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR_expected_prev = LEDR_expected;
end


// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or LEDG_expected or LEDG or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected LEDG = %b | expected LEDR = %b | ",HEX0_expected_prev,HEX1_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,LEDG_expected_prev,LEDR_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real LEDG = %b | real LEDR = %b | ",HEX0_prev,HEX1_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,LEDG_prev,LEDR_prev);
`endif
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module part2_another_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] KEY;
reg [16:0] SW;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [8:8] LEDG;
wire [7:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
part2_another i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW)
);
// SW[ 16 ]
initial
begin
	SW[16] = 1'b0;
	SW[16] = #100000 1'b1;
	SW[16] = #600000 1'b0;
	SW[16] = #100000 1'b1;
	SW[16] = #100000 1'b0;
end 
// SW[ 15 ]
initial
begin
	SW[15] = 1'b1;
	SW[15] = #100000 1'b0;
	SW[15] = #200000 1'b1;
	SW[15] = #200000 1'b0;
	SW[15] = #100000 1'b1;
	SW[15] = #100000 1'b0;
	SW[15] = #200000 1'b1;
end 
// SW[ 14 ]
initial
begin
	SW[14] = 1'b0;
	SW[14] = #100000 1'b1;
	SW[14] = #400000 1'b0;
	SW[14] = #100000 1'b1;
	SW[14] = #200000 1'b0;
	SW[14] = #100000 1'b1;
end 
// SW[ 13 ]
initial
begin
	SW[13] = 1'b1;
	SW[13] = #100000 1'b0;
	SW[13] = #200000 1'b1;
	SW[13] = #200000 1'b0;
	SW[13] = #200000 1'b1;
	SW[13] = #200000 1'b0;
end 
// SW[ 12 ]
initial
begin
	SW[12] = 1'b1;
	SW[12] = #100000 1'b0;
	SW[12] = #100000 1'b1;
	SW[12] = #100000 1'b0;
	SW[12] = #100000 1'b1;
	SW[12] = #300000 1'b0;
	SW[12] = #200000 1'b1;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b1;
	SW[11] = #100000 1'b0;
	SW[11] = #200000 1'b1;
	SW[11] = #100000 1'b0;
	SW[11] = #200000 1'b1;
	SW[11] = #100000 1'b0;
	SW[11] = #200000 1'b1;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b1;
	SW[10] = #800000 1'b0;
	SW[10] = #100000 1'b1;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
	SW[9] = #300000 1'b1;
	SW[9] = #200000 1'b0;
	SW[9] = #400000 1'b1;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b1;
	SW[8] = #200000 1'b0;
	SW[8] = #200000 1'b1;
	SW[8] = #100000 1'b0;
	SW[8] = #100000 1'b1;
	SW[8] = #100000 1'b0;
	SW[8] = #100000 1'b1;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
	SW[7] = #100000 1'b1;
	SW[7] = #100000 1'b0;
	SW[7] = #400000 1'b1;
	SW[7] = #100000 1'b0;
	SW[7] = #100000 1'b1;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
	SW[6] = #100000 1'b1;
	SW[6] = #200000 1'b0;
	SW[6] = #200000 1'b1;
	SW[6] = #100000 1'b0;
	SW[6] = #300000 1'b1;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b1;
	SW[5] = #500000 1'b0;
	SW[5] = #200000 1'b1;
	SW[5] = #100000 1'b0;
	SW[5] = #100000 1'b1;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
	SW[4] = #300000 1'b1;
	SW[4] = #100000 1'b0;
	SW[4] = #300000 1'b1;
	SW[4] = #200000 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b1;
	SW[3] = #100000 1'b0;
	SW[3] = #200000 1'b1;
	SW[3] = #100000 1'b0;
	SW[3] = #200000 1'b1;
	SW[3] = #100000 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #100000 1'b1;
	SW[2] = #100000 1'b0;
	SW[2] = #100000 1'b1;
	SW[2] = #100000 1'b0;
	SW[2] = #200000 1'b1;
	SW[2] = #100000 1'b0;
	SW[2] = #100000 1'b1;
	SW[2] = #100000 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b1;
	SW[1] = #100000 1'b0;
	SW[1] = #200000 1'b1;
	SW[1] = #100000 1'b0;
	SW[1] = #100000 1'b1;
	SW[1] = #100000 1'b0;
	SW[1] = #300000 1'b1;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b1;
	SW[0] = #400000 1'b0;
end 

// KEY[1]
initial
begin
	repeat(6)
	begin
		KEY[1] = 1'b0;
		KEY[1] = #75000 1'b1;
		# 75000;
	end
	KEY[1] = 1'b0;
	KEY[1] = #75000 1'b1;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
end 

part2_another_vlg_sample_tst tb_sample (
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

part2_another_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

